# 워크플로우의 이름을 설정합니다.
name: Update README

# 이 워크플로우가 어떤 이벤트에 의해 실행될지를 지정합니다. 여기서는 push 이벤트에 의해 실행됩니다.
on: [push]

# 이 워크플로우에서 수행할 작업들을 정의합니다.
jobs:
  # 각 작업에는 고유한 ID를 지정합니다. 여기서는 'update-readme'라는 ID를 사용합니다.
  update-readme:
    # 이 작업이 실행될 러너를 지정합니다. 여기서는 'ubuntu-latest' 러너를 사용합니다.
    runs-on: ubuntu-latest

    # 이 작업에서 수행할 단계들을 정의합니다.
    steps:
    # 첫 번째 단계에서는 저장소의 코드를 체크아웃합니다.
    - name: Checkout code
      uses: actions/checkout@v2

    # 두 번째 단계에서는 디렉토리 목록을 생성하고 README 파일을 업데이트합니다.
    - name: Generate directory list and update README
      run: |
        # README 파일을 생성하고 첫 번째 줄에 '# Directory List'를 씁니다.
        echo "# Directory List" > README.md
        # 현재 디렉토리의 모든 하위 디렉토리에 대해 반복합니다.
        for d in */; do
          # 각 디렉토리 이름을 README 파일에 추가합니다.
          echo "- $d" >> README.md
        done

    # 세 번째 단계에서는 변경 사항을 커밋하고 푸시합니다.
    - name: Commit and push if changed
      run: |
        # 변경 사항이 있는지 확인합니다.
        git diff
        # Git 사용자 이메일과 이름을 설정합니다.
        git config --local user.email "ptuguitar@naver.com"
        git config --local user.name "isGeekCode"
        # 모든 변경 사항을 스테이징합니다.
        git add -A
        # 변경 사항을 커밋합니다. 변경 사항이 없으면 이 명령어는 실패하므로 '|| exit 0'을 사용하여 이 경우에도 스크립트가 계속 진행되게 합니다.
        git commit -m "Update README with directory list" -a || exit 0
        # 변경 사항을 푸시합니다.
        git push


# 워크플로우의 이름을 설정하는 부분. 이 이름은 GitHub Actions UI에서 보여진다.
#name: CI

# 이 워크플로우가 어떤 이벤트에 의해 실행될지를 정의하는 부분.
# 여기서는 push 이벤트나 pull_request 이벤트가 발생할 때마다 이 워크플로우가 실행되도록 설정하였습니다.
#on: [push, pull_request]

# 여기에서 워크플로우의 작업들을 정의하는 부분.
#jobs:
  
#   이는 "build"라는 이름의 작업을 정의하는 부분.
#  build:
    
#     이 작업은 Ubuntu의 최신 버전 가상 환경에서 실행됩니다.
#    runs-on: ubuntu-latest

#     작업에 포함된 단계들을 정의하는 부분.
#    steps:
      
#     uses는 특정 깃허브 액션을 사용하겠다고 지정하는 부분.
#     첫 번째 단계에서는 actions/checkout@v2 액션을 사용하여 워크플로우가 실행되는 가상 환경에 레포지토리를 체크아웃합니다.
#    - uses: actions/checkout@v2

#     두 번째 단계의 이름을 정의하는 부분. 이 이름은 GitHub Actions UI에서 보여진다.
#    - name: Run a one-line script
      
      
#       run은 실행할 커맨드를 지정하는 부분.
#       이 단계에서는 'echo Hello, world!'라는 명령어를 실행한다. 이 명령어는 터미널에 'Hello, world!'를 출력한다.
#      run: echo Hello, world!


